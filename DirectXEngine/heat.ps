/////////////
// GLOBALS //
/////////////

Texture2D colorTexture : register(t0); 
Texture2D glowTexture : register(t1); 
Texture2D noiseTexture : reigster(t2); 
SamplerState SampleTypeClamp : register(s0); 
SamplerState SampleTypeWrap : register(s1); 

//////////////////////
// CONSTANT BUFFERS //
//////////////////////

cbuffer GlowBuffer
{
	float emissiveMultiplier; 
	float3 padding;
};

cbuffer DistortionBuffer
{
	float2 distortion1; 
	float2 distortion2; 
	float2 distortion3; 
	float distortionScale; 
	float distortionBias; 
};

//////////////
// TYPEDEFS //
//////////////

struct PixelInputType
{
	float4 position : SV_POSITION; 
	float2 tex : TEXCOORD0; 
	float2 texCoords1 : TEXCOORD1; 
	float2 texCoords2 : TEXCOORD2; 
	float2 texCoords3 : TEXCOORD3; 
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////

float4 HeatPixelShader(PixelInputType input) : SV_TARGET
{
	float4 noise1, noise2, noise3; 
	float4 finalNoise; 
	float heatOffsetBias; 
	float2 heatOffset;
	float4 glowMap;
	float4 textureColor;
	float4 color;

	// Sample the same noise texture using the 3 different texture coordinates to get 3 different noise scales.
	noise1 = noiseTexture.Sample(SampleTypeWrap, input.texCoords1); 
	noise2 = noiseTexture.Sample(SampleTypeWrap, input.texCoords2); 
	noise3 = noiseTexture.Sample(SampleTypeWrap, input.texCoords3); 

	// Move the noise from the (0, 1) range to (-1, 1)
	noise1 = (noise1 - 0.5f) * 2.f;
	noise2 = (noise2 - 0.5f) * 2.f;
	noise3 = (noise3 - 0.5f) * 2.f; 

	// Distort the 3 noise x and y coordinates by the 3 different distortion x and y values.
	noise1.xy *= distortion1.xy; 
	noise2.xy *= distortion2.xy;
	noise3.xy *= distortion3.xy; 

	// Combine all 3 distorted noise results into a single noise result.
	finalNoise = noise1 + noise2 + noise3; 

	// Set the heat offset bias to modify the heat distortion to be less crazy.
	heatOffsetBias = 0.001f; 

	// Create the heat offset texture coords for sampling to create the heat shimmer effect.
	heatOffset = ((finalNoise * 2.f) - 1.f) * heatOffsetBias; 

	// Sample the glow texture using the heat offset for texture coords.
	glowMap = glowTexture.Sample(SampleTypeClamp, input.tex + heatOffset); 

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = colorTexture.Sample(SampleTypeClamp, input.tex); 

	// Add the texture color to the glow color multiplied by the glow strength.
	color = saturate(textureColor + (glowMap * emissiveMultiplier)); 

	return color; 
}