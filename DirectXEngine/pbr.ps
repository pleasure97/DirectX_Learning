/////////////
// GLOBALS //
/////////////

Texture2D diffuseTexture : register(t0); 
Texture2D normalMap : register(t1); 
Texture2D rmTexture : register(t2); 
SamplerState SampleType : register(s0); 

cbuffer LightBuffer
{
	float3 lightDirection;
	float padding; 
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal: BINORMAL;
	float3 viewDirection : TEXCOORD1; 
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 PbrPixelShader(PixelInputType input) : SV_TARGET
{
	float3 lightDir; 
	float3 albedo;
	float3 rmColor;
	float3 bumpMap;
	float roughness;
	float metallic;
	float3 F0; 
	float3 halfDirection;
	flaot NdotH, NdotV, NdotL, HdotV; 
	float roughnessSqr, roughSqr2, NdotHSqr, denominator, normalDistribution; 
	float smithL, smithV, geometricShadow; 
	float3 fresnel;
	float3 specularity; 
	float4 color; 

	// Invert the light direction for calculation.
	lightDir = -lightdirection; 

	// Sample the textures.
	albedo = diffuseTexture.Sample(SampleType, input.tex).rgb; 
	rmColor = rmTexture.Sample(SampleType, input.tex).rgb;
	bumpMap = normalMap.Sample(SampleType, input.tex).rgb; 

	// Calculate the normal using the normal map.
	bumpMap = (bumpMap * 2.f) - 1.f;
	bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
	bumpNormal = normalize(bumpNormal);

	// Get the metallic and roughness from the roughness/metallic texture.
	roughness = rmColor.r; 
	metallic = rmColor.b;

	// Surface reflection at 0 degrees. 
	// Combine with albedo based on metal.
	// Needed for Fresnel calculation.
	F0 = float3(0.04f, 0.04f, 0.04f); 
	F0 = lerp(F0, albedo, metallic); 

	// Setup the vector needed for lighting calculations.
	halfDirection = normalize(input.viewDirection + lightDir); 
	NdotH = max(0.f, dot(bumpNormal, halfDirection)); 
	NdotV = max(0.f, dot(bumpNormal, input.viewDirection)); 
	NdotL = max(0.f, dot(bumpNormal, lightDir)); 
	HdotV = max(0.f, dot(halfDirection, input.viewDirection)); 

	// GGX normal distribution calculation.
	roughnessSqr = roughness * roughness; 
	roughSqr2 = roughnessSqr * roughnessSqr; 
	NdotHSqr = NdotH * NdotH; 
	denominator = (NdotHSqr * (roughSqr2 - 1.f) + 1.f);		
	denominator = 3.14159265359f * (denominator * denominator); 
	normalDistribution = roughSqr2 / denominator; 

	// Schlick geometry shadow calculation.
	smithL = NdotL / (NdotL * (1.f - roughnessSqr) + roughnessSqr); 
	smithV = NdotV / (NdotV * (1.f - roughnessSqr) + roughnessSqr); 
	geometricShadow = smithL * smithV; 

	// Fresnel schlick approximation for fresnel term calculation.
	fresnel = F0 * (1.f - F0) * pow(1.f - HdotV, 5.f); 

	// Now calculate the bidirectional reflectance distribution function.
	specularity = (normalDistribution * fresnel * geometricShadow) / ((4.f * (NdotL * NdotV)) + 0.00001f);

	// Final light equation.
	color.rgb = albedo + specularity; 
	color.rgb *= NdotL; 

	// Set the alpha to 1.f.
	color = float4(color.rgb, 1.f); 

	return color; 
}
