//////////////
// TEXTURES //
//////////////
Texture2D shaderTexture : register(t0);

///////////////////
// SAMPLE STATES //
///////////////////
SamplerState SampleTypeClamp : register(s0); 

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float4 viewPosition : POSITION;
    float3 normal : NORMAL;
};

struct PixelOutputType
{
    float4 position : SV_Target0; 
    float4 normal : SV_Target1; 
    float4 color : SV_Target2; 
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
PixelOutputType GBufferPixelShader(PixelInputType input) : SV_TARGET
{
    PixelOutputType output;

    // Store the view space position into the RGB of the render to texture.
    output.position = float4(input.viewPosition.x, input.viewPosition.y, input.viewPosition.z, 1.0f);

    // Normalize the interpolated input normals.
    input.normal = normalize(input.normal);
	
    // Set the ouput data to be the normals into the RGB of the render to texture.
    output.normal = float4(input.normal.x, input.normal.y, input.normal.z, 1.0f);

    // Sample the color from the texture and store it for output to the render target.
    output.color = shaderTexture.Sample(SampleTypeClamp, input.tex);

    return output;
}
