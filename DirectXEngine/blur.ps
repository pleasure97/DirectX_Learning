//////////////////////
// CONSTANT BUFFERS //
//////////////////////

cbuffer ScreenBuffer
{
	float screenWidth; 
	float screenHeight; 
	float blurType; 
	float padding; 
};

/////////////
// GLOBALS //
/////////////

Texture2D shaderTexture : register(t0); 
SamplerState SampleType : register(s0); 

//////////////
// TYPEDEFS //
//////////////

struct PixelInputType
{
	float4 position : SV_POSITION; 
	float2 tex : TEXCOORD0; 
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////

float4 BlurPixelShader(PixelInputType input) : SV_TARGET
{
	float texelSize; 
	float2 texCoord1, texCoord2, texCoord3, texCoord4, texCoord5; 
	float2 texCoord6, texCoord7, texCoord8, texCoord9; 
	float weight0, weight1, weight2, weight3, weight4; 
	float normalization; 
	float4 color; 

	// Setup a horizontal blur if the blurType is 0.f, otherwise, setup a vertical blur. 
	if (blurType < 0.1f)
	{
		// Determine the floating point size of a texel for a screen with this specific width. 
		texelSize = 1.f / screenWidth; 

		// Create UV coordinates for the pixel and its 4 horizontal neighbors on either side. 
		texCoord1 = input.tex + float2(texelSize * -4.f, 0.f); 
		texCoord2 = input.tex + float2(texelSize * -3.f, 0.f); 
		texCoord3 = input.tex + float2(texelSize * -2.f, 0.f); 
		texCoord4 = input.tex + float2(texelSize * -1.f, 0.f); 
		texCoord5 = input.tex + float2(texelSize * 0.f, 0.f); 
		texCoord6 = input.tex + float2(texelSize * 1.f, 0.f); 
		texCoord7 = input.tex + float2(texelSize * 2.f, 0.f); 
		texCoord8 = input.tex + float2(texelSize * 3.f, 0.f); 
		texCoord9 = input.tex + float2(texelSize * 4.f, 0.f); 
	}
	else
	{
		// Determine the floating point size of a texel for a screen with this specific height. 
		texelSize = 1.f / screenHeight; 

		// Create UV coordinates for the pixel and its 4 vertical neighbors on either side. 
		texCoord1 = input.tex + float2(0.f, texelSize * -4.f); 
		texCoord2 = input.tex + float2(0.f, texelSize * -3.f); 
		texCoord3 = input.tex + float2(0.f, texelSize * -2.f); 
		texCoord4 = input.tex + float2(0.f, texelSize * -1.f); 
		texCoord5 = input.tex + float2(0.f, texelSize * 0.f); 
		texCoord6 = input.tex + float2(0.f, texelSize * 1.f); 
		texCoord7 = input.tex + float2(0.f, texelSize * 2.f); 
		texCoord8 = input.tex + float2(0.f, texelSize * 3.f); 
		texCoord9 = input.tex + float2(0.f, texelSize * 4.f); 
	}

	// Create the weights of each neighbor pixel will contribute to the blur. 
	weight0 = 1.f; 
	weight1 = 0.9f; 
	weight2 = 0.55f; 
	weight3 = 0.18f; 
	weight4 = 0.1f; 

	// Create a normalized value to average the weights out a bit. 
	normalization = (weight0 + 2.f *(weight1 + weight2 + weight3 + weight4)); 

	// Normalize the weights.
	weight0 /= normalization; 
	weight1 /= normalization; 
	weight2 /= normalization; 
	weight3 /= normalization; 
	weight4 /= normalization; 

	// Initialize the color to black.
	color = float4(0.f, 0.f, 0.f, 0.f); 

	// Add the 9 horizontal pixels to the color by the specific weight of each. 
	color += shaderTexture.Sample(SampleType, texCoord1) * weight4; 
	color += shaderTexture.Sample(SampleType, texCoord2) * weight3; 
	color += shaderTexture.Sample(SampleType, texCoord3) * weight2; 
	color += shaderTexture.Sample(SampleType, texCoord4) * weight1; 
	color += shaderTexture.Sample(SampleType, texCoord5) * weight0; 
	color += shaderTexture.Sample(SampleType, texCoord6) * weight1; 
	color += shaderTexture.Sample(SampleType, texCoord7) * weight2; 
	color += shaderTexture.Sample(SampleType, texCoord8) * weight3; 
	color += shaderTexture.Sample(SampleType, texCoord9) * weight4; 

	// Set the alpha channel to 1 as we only want to blur RGB for now. 
	color.a = 1.f; 

	return color; 
}