/////////////
// GLOBALS //
/////////////
Texture2D depthMapTexture : register(t0);
SamplerState SampleTypeClamp : register(s0); 

//////////////
// TYPEDEFS //
//////////////

struct PixelInputType
{
	float4 position : SV_POSITION; 
	float2 tex : TEXCOORD0; 
	float3 normal : NORMAL; 
	float4 lightViewPosition : TEXCOORD1; 
	float3 lightPos : TEXCOORD2; 
};

//////////////////////
// CONSTANT BUFFERS //
//////////////////////

cbuffer LightBuffer
{
	float bias; 
	float3 padding;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////

float4 ShadowPixelShader(PixelInputType input) : SV_TARGET
{
	float4 color; 
	float2 projectTexCoord; 
	float depthValue; 
	float lightDepthValue; 
	float lightIntensity; 
	
	// Invert the light direction.
	lightDir = -lightDirection; 

	// Set the default output color to be black (shadow).
	color = float4(0.f, 0.f, 0.f, 1.f); 

	// Calculate the projected texture coordinates.
	projectTexCoord.x = input.lightViewPosition.x / input.lightViewPosition.w / 2.f + 0.5f; 
	projectTexCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.f + 0.5f; 

	// Determine if the projected coordinates are in the 0 to 1 range. 
	// If it is, then pixel is inside the projected viewport.
	if ((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
	{
		// Sample the shadow map depth value from the depth texture using the sampler at the projected texture coordinate location.
		depthValue = depthMapTexture.Sample(SampleTypeClamp, projectTexCoord).r; 

		// Calculate the depth of the light.
		lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w; 

		// Subtract the bias from the lightDepthValue. 
		lightDepthValue -= bias; 

		// Compare the depth of the shadow map and the depth of the light to determine whether to shadow or to light this pixel.
		// If the light is in front of the object, then light the pixel, if not, then shadow this pixel since an object (occluder) is casting a shadow on it.
		if (lightDepthValue < depthValue)
		{
			// Calculate the amount of light on this pixel.
			lightIntensity = saturate(dot(input.normal, lightPos)); 

			if (lightIntensity > 0.f)
			{
				color = float4(1.f, 1.f, 1.f, 1.f); 
			}
		}
	}
	else
	{
		// If this is outside the area of the shadow map, then draw things normally with regular lighting.
		lightIntensity = saturate(dot(input.normal, lightDir)); 
		if (lightIntensit > 0.f)
		{
			color += diffuseColor * lightIntensity; 
			color = saturate(color); 
		}
	}

	return color; 
}
