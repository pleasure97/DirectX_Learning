/////////////
// GLOBALS //
/////////////

Texture2D shaderTexture : register(t0); 
Texture2D projectionTexture : register(t1); 
SamplerState SampleType : register(s0); 

//////////////
// TYPEDEFS //
//////////////

struct PixelInputType
{
	float4 position : SV_POSITION; 
	float2 tex : TEXCOORD0; 
	float4 viewPosition : TEXCOORD1; 
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////

float4 ProjectionPixelShader(PixelInputType input) : SV_TARGET
{
	float2 projectTexCoord; 
	float4 color; 

	// Calculate the projected texture coordinates.
	projectTexCoord.x = input.viewPosition.x / input.viewPosition.w / 2.f + 0.5f; 
	projectTexCoord.y = -input.viewPosition.y / input.viewPosition.w / 2.f + 0.5f; 

	// Determine if the projected coordinates are in the 0 to 1 range. 
	// If it is, then pixel is inside the projected viewport. 
	if ((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
	{
		// Sample the color value from the projection texture using the sampler at the projected texture coordinate location. 
		color = projectionTexture.Sample(SampleType, projectTexCoord); 
	}
	else
	{
		// Sample the pixel color from the texture using the sampler at this texture coordinate location.
		color = shaderTexture.Sample(SampleType, input.tex); 
	}

	return color; 
}
