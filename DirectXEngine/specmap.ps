/////////////
// GLOBALS //
/////////////

Texture2D shaderTexture1 : register(t0); 
Texture2D shaderTexture2 : register(t1); 
Texture2D shaderTexture3 : register(t2); 
SamplerState SampleType : register(s0); 

cbuffer LightBuffer
{
	float4 diffuseColor; 
	float4 specularColor;
	float specularPower; 
	float3 lightDirection; 
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0; 
	float3 normal : NORMAL; 
	float3 tangent : TANGENT; 
	float3 binormal : BINORMAL; 
	float3 viewDirection : TEXCOORD1; 
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 SpecMapPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor; 
	float4 bumpMap; 
	float3 bumpNormal; 
	float3 lightDir; 
	float lightIntensity; 
	float4 color; 
	float4 specularIntensity; 
	float3 reflection; 
	float4 specular; 

	// Sample the pixel color from the color texture at this location.
	textureColor = shaderTexture1.Sample(SampleType, input.tex); 

	// Sample the pixel from the normal map.
	bumpMap = shaderTexture2.Sample(SampleType, input.tex); 


}